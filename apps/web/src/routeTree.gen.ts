/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VoteImport } from './routes/vote'
import { Route as IndexImport } from './routes/index'
import { Route as VoteIndexImport } from './routes/vote.index'
import { Route as LoginIndexImport } from './routes/login.index'
import { Route as VoteVoteImport } from './routes/vote.vote'
import { Route as VoteResultsImport } from './routes/vote.results'

// Create/Update Routes

const VoteRoute = VoteImport.update({
  id: '/vote',
  path: '/vote',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VoteIndexRoute = VoteIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => VoteRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const VoteVoteRoute = VoteVoteImport.update({
  id: '/vote',
  path: '/vote',
  getParentRoute: () => VoteRoute,
} as any)

const VoteResultsRoute = VoteResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => VoteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/vote': {
      id: '/vote'
      path: '/vote'
      fullPath: '/vote'
      preLoaderRoute: typeof VoteImport
      parentRoute: typeof rootRoute
    }
    '/vote/results': {
      id: '/vote/results'
      path: '/results'
      fullPath: '/vote/results'
      preLoaderRoute: typeof VoteResultsImport
      parentRoute: typeof VoteImport
    }
    '/vote/vote': {
      id: '/vote/vote'
      path: '/vote'
      fullPath: '/vote/vote'
      preLoaderRoute: typeof VoteVoteImport
      parentRoute: typeof VoteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/vote/': {
      id: '/vote/'
      path: '/'
      fullPath: '/vote/'
      preLoaderRoute: typeof VoteIndexImport
      parentRoute: typeof VoteImport
    }
  }
}

// Create and export the route tree

interface VoteRouteChildren {
  VoteResultsRoute: typeof VoteResultsRoute
  VoteVoteRoute: typeof VoteVoteRoute
  VoteIndexRoute: typeof VoteIndexRoute
}

const VoteRouteChildren: VoteRouteChildren = {
  VoteResultsRoute: VoteResultsRoute,
  VoteVoteRoute: VoteVoteRoute,
  VoteIndexRoute: VoteIndexRoute,
}

const VoteRouteWithChildren = VoteRoute._addFileChildren(VoteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/vote': typeof VoteRouteWithChildren
  '/vote/results': typeof VoteResultsRoute
  '/vote/vote': typeof VoteVoteRoute
  '/login': typeof LoginIndexRoute
  '/vote/': typeof VoteIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/vote/results': typeof VoteResultsRoute
  '/vote/vote': typeof VoteVoteRoute
  '/login': typeof LoginIndexRoute
  '/vote': typeof VoteIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/vote': typeof VoteRouteWithChildren
  '/vote/results': typeof VoteResultsRoute
  '/vote/vote': typeof VoteVoteRoute
  '/login/': typeof LoginIndexRoute
  '/vote/': typeof VoteIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/vote'
    | '/vote/results'
    | '/vote/vote'
    | '/login'
    | '/vote/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/vote/results' | '/vote/vote' | '/login' | '/vote'
  id:
    | '__root__'
    | '/'
    | '/vote'
    | '/vote/results'
    | '/vote/vote'
    | '/login/'
    | '/vote/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  VoteRoute: typeof VoteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  VoteRoute: VoteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/vote",
        "/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/vote": {
      "filePath": "vote.tsx",
      "children": [
        "/vote/results",
        "/vote/vote",
        "/vote/"
      ]
    },
    "/vote/results": {
      "filePath": "vote.results.tsx",
      "parent": "/vote"
    },
    "/vote/vote": {
      "filePath": "vote.vote.tsx",
      "parent": "/vote"
    },
    "/login/": {
      "filePath": "login.index.tsx"
    },
    "/vote/": {
      "filePath": "vote.index.tsx",
      "parent": "/vote"
    }
  }
}
ROUTE_MANIFEST_END */
